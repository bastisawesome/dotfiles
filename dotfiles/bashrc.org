#+TITLE: Bashrc
#+PROPERTY: header-args :tangle ~/.bashrc
#+AUTHOR: BastIsAwesome

* Bash Config
** Exports
Get proper colours

#+begin_src bash
export TERM='xterm-256color'
#+end_src

No duplicate History entries

#+begin_src bash
HISTCONTROL=ignoredups:erasedups
#+end_src

Visual and terminal default editors.

#+begin_src bash
export EDITOR='nvim'
export VISUAL='emacsclient -a "nvim" -c'
#+end_src

Use `bat` as manpager

#+begin_src bash
# Fix bug with Bat
export MANROFFOPT="-c"
export MANPAGER='sh -c "col -bx | bat -l man -p"'
#+end_src

If not running interactively, don't do anything.

#+begin_src bash
[[ $- != *i* ]] && return
#+end_src

* Aliases
#+begin_src bash
alias ls='ls --color=auto'
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'
alias ping='ping -c 20 $@'
alias genpass='python -c "import uuid; print(uuid.uuid4().hex)"'
alias java8='/usr/lib/jvm/java-8-jdk/bin/java'
alias pyc='python -m compileall'
#+end_src

Safety features
#+begin_src bash
alias cp='cp -i'
alias rm='rm -i'
alias mv='mv -i'
#+end_src

Editors
#+begin_src bash
alias emacs='emacsclient -a "nvim" -c'
alias vim='nvim'
#+end_src

Default command args
#+begin_src bash
alias df='df -h'
alias free='free -h'
alias psa='ps auxf'
alias psgrep='ps aux | grep -v grep | grep -i -e VSZ -e'
alias psmem='ps auxf | sort -nr -k 4'
alias pscpu='ps auxf | sort -nr -k 3'
#+end_src

* Git Prompt
Source the Git prompt, if Starship prompt is not being used.

#+begin_src bash
# source /usr/share/git/completion/git-prompt.sh
# GIT_PROMPT_ENABLED=true
#+end_src

* Prompt
Setup the prompt if not using Starship prompt. Option for with or without Git prompt.

#+begin_src bash
if ! hash starship 2>/dev/null; then
    if ! GIT_PROMPT_ENABLED; then
        export PS1="\[\e[96m\]\W\[\e[m\] \[\e[92m\]\\$\[\e[m\] \[\e[m\]\[\e[1;34m\]"
    else
        export PS1='\[\e[0;96m\]\W\[\e[0;38;5;46m\]$(__git_ps1 " %s") \[\e[0;94m\]\$ \[\e[0m\]'
    fi
#+end_src

** Starship
Enable Starship prompt

#+begin_src bash
else
    eval "$(starship init bash)"
fi
#+end_src

* Path
Configure the custom PATH.

#+begin_src bash
export PATH=$PATH:/home/bast/local/bin:/home/bast/local/opt/bin:/home/bast/.local/bin

if [ -d "$HOME/.config/emacs/bin" ]; then
	PATH="$PATH:$HOME/.config/emacs/bin"
fi

if [ -d "$HOME/.local/bin" ]; then
    PATH="$HOME/.local/bin:$PATH"
fi

if [ -d "$HOME/local/bin" ]; then
    PATH="$HOME/local/bin:$PATH"
fi
#+end_src

* Python Virtual Environments
#+begin_src bash
#export WORKON_HOME=~/.virtualenvs
#source /usr/bin/virtualenvwrapper.sh
#+end_src

Ensure that Python allows tab-completion, even with virtual environments

#+begin_src bash
if [[ -f ~/.config/.pythonrc.py ]]; then
    export PYTHONSTARTUP=~/.config/.pythonrc.py
fi
#+end_src

Pipenv autocomplete

#+begin_src bash
if hash pipenv 2>/dev/null; then
    eval  "$(_PIPENV_COMPLETE=bash_source pipenv)"
fi
#+end_src

* Shell Options
1. Automatically CD into a named directory
2. Autocorrect CD misspellings
3. Save multi-line commands in history as a single line
4. Enable globs
5. Do not overwrite history
6. Expand aliases
7. Checks terminal size when bash regains control

#+begin_src bash
shopt -s autocd
shopt -s cdspell
shopt -s cmdhist
shopt -s dotglob
shopt -s histappend
shopt -s expand_aliases
shopt -s checkwinsize
#+end_src

* Archive Extraction
#+begin_src bash
# Usage: ex <file>
ex() {
    if [ -f "$1" ]; then
        case $1 in
            ,*.tar.bz2)  tar xjf $1      ;;
            ,*.tar.gz)   tar xzf $1      ;;
            ,*.bz2)      bunzip2 $1      ;;
            ,*.rar)      unrar x $1      ;;
            ,*.gz)       gunzip $1       ;;
            ,*.tar)      tar xf $1       ;;
            ,*.tbz2)     tar xjf $1      ;;
            ,*.tgz)      tar xzf $1      ;;
            ,*.zip)      unzip $1        ;;
            ,*.Z)        uncompress $1   ;;
            ,*.7z)       7z x $1         ;;
            ,*.deb)      ar x $1         ;;
            ,*.tar.xz)   tar xf $1       ;;
            ,*.tar.zst)  unzstd $1       ;;
            ,*)          echo "'$1' cannot be extracted via ex()";;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}
#+end_src

* Dotbare
Configure Dotbare.

#+begin_src bash
export DOTBARE_DIR=dotfiles
#+end_src
